# fzf設定
source ~/.fzf.bash
export FZF_DEFAULT_OPTS='--reverse --border'

# 予め作っておいたコマンドのリストで fzf する
function commands-to-fzf() {
  local COMMAND=$(cat ~/.fzflist/commands.txt | fzf +m)
  if [ -n "$COMMAND" ]; then
    eval $COMMAND
    history -s $COMMAND # ↑押した時の直近の履歴に入る
  fi
}

# 予め作っておいたパスのリストで fzf して cd する
function directories-to-fzf-cd() {
  local DIR_PATH=$(cat ~/.fzflist/directories.txt | fzf +m)
  if [ -n "$DIR_PATH" ]; then
    eval cd $DIR_PATH
    eval history -s cd $DIR_PATH
  fi
}

# 予め作っておいたパスのリストで fzf して code する
function files-to-fzf-code() {
  local FILE_PATH=$(cat ~/.fzflist/files.txt | fzf +m)
  if [ -n "$FILE_PATH" ]; then
    eval code $FILE_PATH
    eval history -s code $FILE_PATH
  fi
}

# カレントディレクトリ下の git 管理ファイルで fzf して code する
function lower-hierarchy-files-to-fzf-code() {
  local FILE_PATH=$(git ls-files | fzf +m)
  if [ -n "$FILE_PATH" ]; then
    eval code $FILE_PATH
    eval history -s code $FILE_PATH
  fi
}

# カレントディレクトリ下のディレクトリを出力
function lower-hierarchy-directories() {
  find . -type d \
    -not -path '.' \
    -not -path "*/node_modules/*" \
    -not -path "*/.git/*" \
    | awk '{print length(),$0}' | sort -n | awk '{print $2}'
}

# カレントディレクトリ下のディレクトリで fzf して cd する
function lower-hierarchy-directories-to-fzf-cd() {
  local DIR_PATH=$(lower-hierarchy-directories | fzf +m)
  if [ -n "$DIR_PATH" ]; then
    eval cd $DIR_PATH
    eval history -s cd $DIR_PATH
  fi
}

alias c='commands-to-fzf'
alias d='directories-to-fzf-cd'
alias f='files-to-fzf-code'
alias lf='lower-hierarchy-files-to-fzf-code'
alias ld='lower-hierarchy-directories-to-fzf-cd'

# history設定
export HISTIGNORE="c:f:d:lf:ld"

function update-commands() {
  cat ~/Projects/dotfiles/fzf_manual_commands.txt > ~/.fzflist/commands.txt;
  (cd && find ./Projects                      -mindepth 1 -maxdepth 1 -not -name ".*" -type d | sed -e "s@^.@~@") | awk '{print "code " $0 }' >> ~/.fzflist/commands.txt;
  (cd && find ./Projects/note-next            -mindepth 1 -maxdepth 1 -not -name ".*" -type d | sed -e "s@^.@~@") | awk '{print "code " $0 }' >> ~/.fzflist/commands.txt;
  (cd && find ./Projects/note-project-private -mindepth 1 -maxdepth 1 -not -name ".*" -type d | sed -e "s@^.@~@") | awk '{print "code " $0 }' >> ~/.fzflist/commands.txt;
}

function update-directories() {
  cat ~/Projects/dotfiles/fzf_manual_directories.txt > ~/.fzflist/directories.txt;
  (cd ~/Projects           && find . -mindepth 1 -maxdepth 1 -type d) | sed -e "s@^.@~/Projects@" >> ~/.fzflist/directories.txt;
  (cd ~/Projects/note      && find . -mindepth 1 -maxdepth 2 -type d) | sed -e "s@^.@~/Projects/note@" >> ~/.fzflist/directories.txt;
  (cd ~/Projects/note-next && find . -mindepth 1 -maxdepth 1 -type d) | sed -e "s@^.@~/Projects/note-next@" >> ~/.fzflist/directories.txt;
}

function update-files() {
  cat ~/Projects/dotfiles/fzf_manual_files.txt > ~/.fzflist/files.txt;
  (cd ~/Projects/secret && git ls-files)          | sed -e "s@^@~/Projects/secret/@" >> ~/.fzflist/files.txt;
  (cd ~/Projects/note && git ls-files)            | sed -e "s@^@~/Projects/note/@" >> ~/.fzflist/files.txt;
  (cd ~/Projects/dotfiles && git ls-files)        | sed -e "s@^@~/Projects/dotfiles/@" >> ~/.fzflist/files.txt;
  (cd ~/.fzflist && find . -maxdepth 1 -type f)   | sed -e "s@^.@~/.fzflist@" >> ~/.fzflist/files.txt;
}

update-commands
update-directories
update-files
