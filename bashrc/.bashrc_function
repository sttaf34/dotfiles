# ~/Projects 下のリポジトリの現在状況を一覧表示
function git-repository-status() {
  find ~/Projects -mindepth 1 -maxdepth 1 -type d | sort | while read line
  do
    cd $line
    git fetch
    if [ "$(__git_ps1)" != " (master=)" -a "$(__git_ps1)" != " (master)" ] ; then
      printf "${PINK}$(pwd)${RESET}\n" | tr '\n' ' '
      printf "${YELLOW}"
      echo "$(__git_ps1)" | tr '\n' ' '
      printf "${RESET}\n"
    fi
  done
}

# ~/Projects 下のリポジトリで引数時間内のコミットログを表示
function git-commit-log() {
  find ~/Projects -mindepth 1 -maxdepth 1 -type d | sort | while read line
  do
    cd $line
    RESULT=$(git --no-pager l --since="$1 hours ago")
    if [ -n "$RESULT" ]; then
      pwd | printf "${GREEN}[%s]${RESET}\n" $(cat)
      git --no-pager l --since="$1 hours ago"
      echo ''
    fi
  done
}

# ~/Projects 下のリポジトリで引数時間内のコミットログをまとめて表示
function git-commit-log-union() {
  find ~/Projects -mindepth 1 -maxdepth 1 -type d | sort | while read line
  do
    cd $line
    RESULT=$(git --no-pager l --since="$1 hours ago")
    if [ -n "$RESULT" ]; then
      git --no-pager l --since="$1 hours ago"
    fi
  done | sort -r
}

# ~/Projects 下のリポジトリでフックが設定されているものを表示
function git-hooks() {
  find ~/Projects -mindepth 1 -maxdepth 1 -type d | sort | while read line
  do
    find $line/.git/hooks \
      -mindepth 1 -maxdepth 1 \
      -not -path "*.sample"
  done
}

function ipv4-to-binary() {
  echo "$@" | tr '.' '\n' | while read line
  do
    echo "obase=2;ibase=10;$line" | bc | printf "%08d " $(cat)
  done
  printf "\n"
}
