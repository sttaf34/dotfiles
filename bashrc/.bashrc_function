# ~/Projects 下のリポジトリの現在状況を一覧表示
function git-echo-repository-status() {
  find ~/Projects -mindepth 1 -maxdepth 1 -type d | sort | while read line
  do
    cd $line
    git fetch
    if [ "$(__git_ps1)" != " (master=)" -a "$(__git_ps1)" != " (master)" ] ; then
      printf "${PINK}$(pwd)${RESET}\n" | tr '\n' ' '
      printf "${YELLOW}"
      echo "$(__git_ps1)" | tr '\n' ' '
      printf "${RESET}\n"
    fi
  done
}

# ~/Projects 下のリポジトリで1日以内のコミットログを表示
function git-echo-commit-log() {
  find ~/Projects -mindepth 1 -maxdepth 1 -type d | sort | while read line
  do
    cd $line
    RESULT=$(git --no-pager l --since="1 days ago")
    if [ -n "$RESULT" ]; then
      pwd | printf "${GREEN}[%s]${RESET}\n" $(cat)
      git --no-pager l --since="1 days ago"
      echo ''
    fi
  done
}

# ~/Projects 下のリポジトリでフックが設定されているものを表示
function git-echo-hooks() {
  find ~/Projects -mindepth 1 -maxdepth 1 -type d | sort | while read line
  do
    find $line/.git/hooks \
      -mindepth 1 -maxdepth 1 \
      -not -path "*.sample"
  done
}

function return-home-routine() {
  date +%F | tr '\n' ' ' >> /tmp/ip_address_history
  curl -s ifconfig.io >> /tmp/ip_address_history
  echo "curl -s ifconfig.io >> /tmp/ip_address_history"

  git-echo-repository-status
}

function ipv4_to_binary() {
  echo "$@" | tr '.' '\n' | while read line
  do
    echo "obase=2;ibase=10;$line" | bc | printf "%08d " $(cat)
  done
  printf "\n"
}

# コマンドをコマンドリストに、重複チェックしてから追加する用の関数
# 例えば「m git remote -v」のように打つ
function m() {
  local FILEPATH=~/Projects/dotfiles/fzf_manual_commands.txt
  eval "grep \"$@\" $FILEPATH > /dev/null"
  if [ $? = 1 ]; then
    echo "echo \"$@\" >> $FILEPATH"
    echo $@ >> $FILEPATH
  fi
}
